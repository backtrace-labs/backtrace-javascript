import { ContentAppender, DebugIdGenerator } from '@backtrace/sourcemap-tools';
import { ConcatSource, RawSource, SourceMapSource } from 'webpack-sources';
import { BacktraceWebpackSourceGenerator } from '../../src/BacktraceWebpackSourceGenerator';

describe('BacktraceWebpackSourceGenerator', () => {
    function createTestSourceMap() {
        const sourceMap: ConstructorParameters<typeof SourceMapSource>[2] = {
            file: 'x',
            mappings: 'x',
            names: ['x'],
            sources: ['x'],
            version: 1,
        };

        return sourceMap;
    }

    describe('addDebugIdToSource', () => {
        it('should append source snippet generated by debugIdGenerator', () => {
            const expected = 'def';

            const source = new RawSource('abc');
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            jest.spyOn(debugIdGenerator, 'generateSourceSnippet').mockReturnValue(expected);

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            const actualSource = sourceGenerator.addDebugIdToSource(source, 'x');
            const actual = actualSource.buffer().toString('utf-8');

            expect(actual).toContain('abc');
            expect(actual).toContain(expected);
        });

        it('should pass uuid to debugIdGenerator', () => {
            const expected = 'def';

            const source = new RawSource('abc');
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const spy = jest.spyOn(debugIdGenerator, 'generateSourceSnippet').mockReturnValue(expected);

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdToSource(source, expected);

            expect(spy).toBeCalledWith(expected);
        });

        it('should return an instance of ConcatSource', () => {
            const source = new RawSource('abc');
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            const actual = sourceGenerator.addDebugIdToSource(source, 'def');

            expect(actual).toBeInstanceOf(ConcatSource);
        });

        it('should not modify original source', () => {
            const expected = 'abc';
            const source = new RawSource(expected);
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdToSource(source, 'def');

            expect(source.buffer().toString('utf-8')).toEqual(expected);
        });
    });

    describe('addDebugIdCommentToSource', () => {
        it('should append comment snippet generated by debugIdGenerator', () => {
            const expected = 'def';

            const source = new RawSource('abc');
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            jest.spyOn(debugIdGenerator, 'generateSourceComment').mockReturnValue(expected);

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            const actualSource = sourceGenerator.addDebugIdCommentToSource(source, 'x');
            const actual = actualSource.buffer().toString('utf-8');

            expect(actual).toContain('abc');
            expect(actual).toContain(expected);
        });

        it('should pass uuid to debugIdGenerator', () => {
            const expected = 'def';

            const source = new RawSource('abc');
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const spy = jest.spyOn(debugIdGenerator, 'generateSourceComment').mockReturnValue(expected);

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdCommentToSource(source, expected);

            expect(spy).toBeCalledWith(expected);
        });

        it('should return an instance of ConcatSource', () => {
            const source = new RawSource('abc');
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            const actual = sourceGenerator.addDebugIdCommentToSource(source, 'def');

            expect(actual).toBeInstanceOf(ConcatSource);
        });

        it('should not modify original source', () => {
            const expected = 'abc';
            const source = new RawSource(expected);
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdCommentToSource(source, 'def');

            expect(source.buffer().toString('utf-8')).toEqual(expected);
        });
    });

    describe('addDebugIdToSourceMap', () => {
        it('should append whole object generated by debugIdGenerator', () => {
            const sourceMap = createTestSourceMap();
            const expected = {
                ...sourceMap,
                debugId: '123',
                newKey2: 456,
            };

            const source = new SourceMapSource('abc', 'x', sourceMap);
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            jest.spyOn(debugIdGenerator, 'addSourceMapKey').mockReturnValue(expected);

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            const actualSourceMapSource = sourceGenerator.addDebugIdToSourceMap(source, 'x');

            const { map: actualMap } = actualSourceMapSource.sourceAndMap();
            expect(actualMap).toEqual(expected);
        });

        it('should pass sourcemap to debugIdGenerator', () => {
            const expected = createTestSourceMap();

            const source = new SourceMapSource('abc', 'x', expected);
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const spy = jest
                .spyOn(debugIdGenerator, 'addSourceMapKey')
                .mockReturnValue({ ...createTestSourceMap(), debugId: '123' });

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdToSourceMap(source, 'def');

            expect(spy).toBeCalledWith(expected, expect.anything());
        });

        it('should pass uuid to debugIdGenerator', () => {
            const expected = 'def';

            const source = new SourceMapSource('abc', 'x', createTestSourceMap());
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const spy = jest
                .spyOn(debugIdGenerator, 'addSourceMapKey')
                .mockReturnValue({ ...createTestSourceMap(), debugId: '123' });

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdToSourceMap(source, expected);

            expect(spy).toBeCalledWith(expect.anything(), expected);
        });

        it('should return an instance of SourceMapSource', () => {
            const source = new SourceMapSource('abc', 'x', createTestSourceMap());
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            const actual = sourceGenerator.addDebugIdToSourceMap(source, 'def');

            expect(actual).toBeInstanceOf(SourceMapSource);
        });

        it('should not modify original source', () => {
            const expected = 'abc';
            const source = new SourceMapSource(expected, 'x', createTestSourceMap());
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdCommentToSource(source, 'def');

            const { source: actualSourceMap } = source.sourceAndMap();
            expect(actualSourceMap.toString('utf-8')).toEqual(expected);
        });

        it('should not modify original sourcemap', () => {
            const expected = createTestSourceMap();
            const modifiedSourceMap = {
                ...expected,
                debugId: '123',
                newKey2: 456,
            };

            const source = new SourceMapSource('abc', 'x', expected);
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            jest.spyOn(debugIdGenerator, 'addSourceMapKey').mockReturnValue(modifiedSourceMap);

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdToSourceMap(source, 'x');

            const { map: actualMap } = source.sourceAndMap();
            expect(actualMap).toEqual(expected);
        });
    });

    describe('addDebugIdToRawSourceMap', () => {
        it('should append whole object generated by debugIdGenerator', () => {
            const sourceMap = createTestSourceMap();
            const expected = {
                ...sourceMap,
                debugId: '123',
                newKey2: 456,
            };

            const source = new RawSource(JSON.stringify(sourceMap));
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            jest.spyOn(debugIdGenerator, 'addSourceMapKey').mockReturnValue(expected);

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            const actualSource = sourceGenerator.addDebugIdToRawSourceMap(source, 'x');

            const actual = JSON.parse(actualSource.buffer().toString('utf-8'));
            expect(actual).toEqual(expected);
        });

        it('should pass uuid to debugIdGenerator', () => {
            const expected = 'def';

            const source = new RawSource(JSON.stringify(createTestSourceMap()));
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const spy = jest
                .spyOn(debugIdGenerator, 'addSourceMapKey')
                .mockReturnValue({ ...createTestSourceMap(), debugId: '123' });

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdToRawSourceMap(source, expected);

            expect(spy).toBeCalledWith(expect.anything(), expected);
        });

        it('should return an instance of RawSource', () => {
            const source = new RawSource(JSON.stringify(createTestSourceMap()));
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            const actual = sourceGenerator.addDebugIdToRawSourceMap(source, 'def');

            expect(actual).toBeInstanceOf(RawSource);
        });

        it('should not modify original source', () => {
            const expected = JSON.stringify(createTestSourceMap());
            const source = new RawSource(expected);
            const debugIdGenerator = new DebugIdGenerator();
            const contentAppender = new ContentAppender();

            const sourceGenerator = new BacktraceWebpackSourceGenerator(debugIdGenerator, contentAppender);
            sourceGenerator.addDebugIdCommentToSource(source, 'def');

            const { source: actualSourceMap } = source.sourceAndMap();
            expect(actualSourceMap.toString('utf-8')).toEqual(expected);
        });
    });
});
