import groovy.json.JsonBuilder
import groovy.json.JsonSlurper


tasks.register("uploadSourceMapsToBacktrace") {
    group = "backtrace"
    description = "This task uploads source maps generated by the react-native builder to Backtrace based on the .backtracejsrc file."

    doLast {
        // Fetch the build variant (debug or release)
        // Default to 'release' if not set
        def buildVariant = project.hasProperty("buildVariant") ? project.buildVariant.toLowerCase() : "release"

        def debugIdPathEnv = System.getenv("DEBUG_ID_PATH")

        def debugIdFile = debugIdPathEnv ? file(debugIdPathEnv) : layout.buildDirectory
                .dir("intermediates/sourcemaps/react/${buildVariant}/.backtrace-sourcemap-id")
                .get()
                .asFile

        if (!debugIdFile.exists()) {
            println("Backtrace: Cannot find .backtrace-sourcemap-id file. Check if customSerializer has been set to Backtrace serializer in metro.config.js.")
            return
        }

        def sourcemapDestinationDirectory = layout.buildDirectory.dir("generated/sourcemaps/react").get().asFile
        def mapFiles = fileTree(dir: sourcemapDestinationDirectory, include: '**/*.map').files
        def mapFile = mapFiles ? mapFiles.iterator().next() : null

        if (!mapFile) {
            println("Backtrace: Cannot find source map file.")
            return
        }

        def jsonSlurper = new JsonSlurper()
        def mapData = jsonSlurper.parse(mapFile)
        mapData.debugId = debugIdFile.text
        def jsonBuilder = new JsonBuilder(mapData)
        mapFile.text = jsonBuilder.toString()

        // Execute Backtrace JS CLI to process upload processed source maps
        def command = ["npx", "--yes", "@backtrace/javascript-cli", "upload", "-p", mapFile.absolutePath]
        exec {
            workingDir file("$rootProject.projectDir/..")
            commandLine command
        }
    }
}
